openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://arch.homework
    description: Generated server url
tags:
  - name: account-controller
    description: Everything about your account
  - name: order-controller
    description: Operations about order
paths:
  /api/refill/{login}:
    put:
      tags:
        - account-controller
      summary: Update amount of money
      description: Performs write-offs and replenishments
      operationId: refill
      parameters:
        - name: login
          in: path
          description: User login
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Account'
        '500':
          description: Ошибка сервера app-billing
        '503':
          description: Ошибка поиска app-billing
  /api/register:
    post:
      tags:
        - account-controller
      operationId: registerAccount
      summary: New User Registration
      description: Create a new user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Account'
        '500':
          description: Ошибка сервера app-billing
        '503':
          description: Ошибка поиска app-billing
  /api/account/{login}:
    get:
      tags:
        - account-controller
      operationId: getAccount
      summary: Get user account information
      description: All information about the user account
      parameters:
        - name: login
          in: path
          description: User login
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Account'
        '500':
          description: Ошибка сервера app-billing
        '503':
          description: Ошибка поиска app-billing
  /api/create-order:
    post:
      tags:
        - order-controller
      operationId: createOrder
      summary: Create an order
      description: Creating an order for a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order'
  /api/order/{login}:
    get:
      tags:
        - order-controller
      operationId: getOrder
      summary: Receiving a user's order
      description: Receiving a user's order by login
      parameters:
        - name: login
          in: path
          description: User login
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order'
  /api/all-order:
    get:
      tags:
        - order-controller
      operationId: getAllOrder
      summary: Get all order
      description: Retrieving all existing orders
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /health:
    get:
      tags:
        - order-controller
      operationId: getHealth
      summary: Check server status
      description: Checks server status
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseDto'
components:
  schemas:
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        login:
          type: string
          example: example_login
        invoice:
          type: string
          format: uuid
          example: 0642ce64-477b-4bd6-af40-55aba50ce5c0
        money:
          type: integer
          format: int32
          example: 1000
        fullName:
          type: string
          example: example_full_name
    AccountDto:
      type: object
      properties:
        login:
          type: string
          example: example_login
        invoice:
          type: string
          format: uuid
          example: 0642ce64-477b-4bd6-af40-55aba50ce5c0
        money:
          type: integer
          format: int32
          example: 1000
        fullName:
          type: string
          example: example_full_name
    OrderDto:
      type: object
      properties:
        login:
          type: string
          example: example_login
        sum:
          type: integer
          format: int32
          example: 1000
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        login:
          type: string
          example: example_login
        accountInvoice:
          type: string
          format: uuid
          example: 0642ce64-477b-4bd6-af40-55aba50ce5c0
        sumOrder:
          type: integer
          format: int32
          example: 1000
        status:
          type: boolean
          example: true
    ResponseDto:
      type: object
      properties:
        status:
          type: string
          example: OK